#Makefile for fsim_sl1

#Common definition
TARGET = fsim_sl2
BUILD_ROOT=../..
VPATH=../..
TCL_LIB=tcl_sl

-include $(BUILD_ROOT)/Makefile.gsetup

#Append include directories
INC_DIRS += \
-I$(BUILD_ROOT)/include \
-I$(BUILD_ROOT)/shell/include \
-I$(BUILD_ROOT)/simkernel/include \
-I$(BUILD_ROOT)/com/include \
-I$(BUILD_ROOT)/sl2/include \
-I$(BUILD_ROOT)/utils/include \
-I$(BUILD_ROOT)/shell/tclsh/generic \
-I$(BUILD_ROOT)/shell/tclsh/readline

#Append compilation flags
#CFLAGS += -DIs_True_On=1 -static -D_RAREG_TO_31=1
CFLAGS += -O2 -g -DIs_True_On=1 -static -D_SL2_SCALAR=0 -D_INCLUDE_REG_DETAIL=0 -D_WARN_LAYOUT=0 \
			-D_WARN_SHELL=0 -DNEED_LONG_JMP -D_ERROR_ALL_FATAL=0 -D_SL2_VBUF_CHECK=1

#Append extra compilation flags
EXTRA_CFLAGS += -D_TIME="'$(TIME)'"
#EXTRA_CFLAGS += -D_TIME="'$(TIME)'" -D__SL2_MULTITHREAD_TEST__ -D__COUNT_NOP16__
  

#Append linker flags
LD_FLAGS += -l$(TCL_LIB) -lrt -ltermcap -lpthread -lX11

#Append library searching path
LIB_DIRS += -L$(BUILD_ROOT)/lib

#Source files
#Source files shared by all architecture
KERNEL_SOURCE = \
simkernel/gui.cpp \
simkernel/memory.cpp \
simkernel/accesslist.cpp \
simkernel/symtable.cpp  

SL1_SOURCE = \
sl2/sl2decoder.cpp \
sl2/sl2disasm.cpp \
sl2/sl2exec.cpp \
sl2/sl2instr.cpp \
sl2/sl2instrtable.cpp \
sl2/sl2mmu.cpp \
sl2/sl2reg.cpp \
sl2/sl2dma.cpp \
sl2/sl2threadctrl.cpp \
sl2/sl2shell.cpp \
com/cmmu.cpp \
main/sl2/sl2main.cpp

SHELL_SOURCE = \
shell/shellbase.cpp \
shell/tclapi.cpp \
shell/arch4gdb.cpp

UTILS_SOURCE = \
utils/messg.cpp \
utils/utils.cpp \
utils/elf_reader.cpp \
utils/longjmp.cpp

ALL_SOURCE := $(KERNEL_SOURCE) $(SL1_SOURCE) $(SHELL_SOURCE) $(SLCOM_SOURCE) $(UTILS_SOURCE)
#ALL_SOURCE := $(SHELL_SOURCE) $(UTILS_SOURCE)

#object files. Object files are placed in current directory
OBJS=$(patsubst %.cpp, %.o, $(notdir $(ALL_SOURCE)))

#Target
all: $(TARGET)
	 
$(TARGET): $(OBJS) $(BUILD_ROOT)/lib/lib$(TCL_LIB).a $(BUILD_ROOT)/lib/libreadline.a $(BUILD_ROOT)/lib/libhistory.a
	$(LINK) $(LIB_DIRS) -o $(TARGET) $^  $(LD_FLAGS) 

#Compilation  and dependency generation rules
$(OBJS): __SRC = $(filter %/$(patsubst %.o,%.cpp,$@),$(ALL_SOURCE))
$(OBJS): __DEP =$(patsubst %.o,%.d, $@)
$(OBJS):
#	echo INC_DIRS:$(INC_DIRS)
#	@echo Building $@ from $(__SRC) by $(__DEP)
	$(CPP)  $(CFLAGS) $(EXTRA_CFLAGS) $(INC_DIRS) $(BUILD_ROOT)/$(__SRC)
#	@echo Creating dependency file $(__DEP) for $@
	@$(GEN_DEP)  $(CFLAGS) $(EXTRA_CFLAGS) $(INC_DIRS)  $(BUILD_ROOT)/$(__SRC) > $(__DEP)

#Autogenerated dependencies. Dependency files are placed in current directory too
DEPFILES_ALL=$(patsubst %.o,%.d,$(OBJS))
-include $(DEPFILES_ALL)

clean:
	rm -Rf *.o *.d $(TARGET)
	
install:
	cp -f $(TARGET) $(INSTALL_DIR)
