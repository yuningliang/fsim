/* /////////////////////////////// "PerfGlobalOpt.cpp" /////////////////////////////////
 *  File: PerfGlobalOpt.cpp
 * 
 * 	Copyright (c) 2006 Beijing SimpLight Nanoelectornics, Ltd.
 * 	All rights reserved.
 *
 *  Created: 2006/11/08
 *  Author: Lingyun Tuo
 */


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>

#include "SL_getopt.h"
#include "PerfGlobalOpt.h"

#define ADDR_UNDEF ((ADDR)-1)

namespace PSIM_SL1 {
int  g_verbose=4;
bool g_dumpIWin=false;
bool g_dumpPipe=false;
bool g_dumpFetchBuffer=false;
bool g_dumpResourceStatus=false;
bool g_dumpHazardDetails=false;
bool g_dumpBranchInfo=false;
bool g_dumpAll=false;
bool g_dumpConfig=false;

#ifndef MULTI_THREAD
char g_appTraceFile[256];	// filename for application(os) trace file
char g_bbTraceFile[256];	// filename for baseband(bb) trace file
#else
char g_trd0TraceFile[256];
char g_trd1TraceFile[256];
char g_trd2TraceFile[256];
char g_trd3TraceFile[256];
#endif
int g_skipCnt[SL1_MAX_THREADS];			// need to modify it for multiple threads
#ifndef MULTI_THREAD
ADDR g_startAddr[SL1_MAX_THREADS]={ADDR_UNDEF, ADDR_UNDEF}; // need to modify it for multiple threads
#else
ADDR g_startAddr[SL1_MAX_THREADS]={ADDR_UNDEF, ADDR_UNDEF, ADDR_UNDEF, ADDR_UNDEF}; // need to modify it for multiple threads
#endif
bool g_includeNOP = true;
#ifndef MULTI_THREAD
bool g_coreNoALULS = false;
bool g_bbNoALU = false;
#else
bool g_thread0NoALULS = false;
bool g_thread1NoALULS = false;
bool g_thread2NoALULS = false;
bool g_thread3NoALULS = false;
#endif
#ifndef MULTI_THREAD
unsigned g_bbRscMask=(unsigned)-1;
unsigned g_coreRscMask=(unsigned)-1;
#else
unsigned g_thread0RscMask=(unsigned)-1;
unsigned g_thread1RscMask=(unsigned)-1;
unsigned g_thread2RscMask=(unsigned)-1;
unsigned g_thread3RscMask=(unsigned)-1;
#endif
unsigned g_endLimit[SL1_MAX_THREADS];	// max instructions processed for each thread
unsigned g_maxGprReadPorts[SL1_MAX_THREADS];
unsigned g_maxGprWritePorts[SL1_MAX_THREADS];
#ifndef MULTI_THREAD
unsigned g_maxIssue[SL1_MAX_THREADS]={2,3};
#else
unsigned g_maxIssue[SL1_MAX_THREADS]={2,2,2,2};
#endif
unsigned g_totalMaxIssue=DEFAULT_MAX_TOTAL_ISSUE;
unsigned g_maxIssuePerCall=1;	// Threads take turn to issue
#ifndef MULTI_THREAD
unsigned g_maxFetch[SL1_MAX_THREADS]={4,6};
#else
unsigned g_maxFetch[SL1_MAX_THREADS]={8,8,8,8};
#endif
char     g_execResources[MAX_RESOURCE_STR];
#ifndef MULTI_THREAD
char     g_issuePriority[256]="bb,core";
#else
char g_issuePriority[256]="thread0,thread1,thread2,thread3";
#endif
unsigned g_RAWBasicLatency=1;
//unsigned g_dcacheMissRatio;	// in percentile
unsigned g_dcacheMissPenalty=0;
unsigned g_icacheMissPenalty=0;	// in cycles
unsigned g_brPenalty=2;	// cycles
unsigned g_jrPenalty=1;	// cycles
unsigned g_linkRegisterLatency=5;	// cycles: jr latency for link register to be ready 
unsigned g_macLatency=1;	// cycles: MAC instructions will take one more cycle 
EXEC_UNIT_SET     g_euSetType;	// 0, 1, 2, 3. 
unsigned g_cycleMask=0xffffffff;	// if cycle & mask is true, BB has priority over execution resources
unsigned g_externalmemLatency = 2;
unsigned g_externalmemLow = 0;
unsigned g_externalmemHigh = 0;
unsigned g_membankLatency = 2;
unsigned g_fftLatency[FFTMAXMODE] = {320,640,1200,3000,7000,14000,32000};
unsigned g_viterbiLatency = 100;
unsigned g_tracebackLatency = 100;
};

using namespace PSIM_SL1;

struct option psim_optTable[]=
{
	{"help",      0, 0, HELPOPTIONID,    OptionType_STR,   NULL, " ", 
	NULL, "-help. Print this information"},
#ifndef MULTI_THREAD
	{"bbtrace",   1, 0, HELPOPTIONID+1,  OptionType_STR,   g_bbTraceFile, "",
	NULL, "-bbtrace tracefile: Specify a trace file generated by fsim for BB thread"},
	{"coretrace", 1, 0, HELPOPTIONID+2,  OptionType_STR,   g_appTraceFile, "",
	NULL, "-coretrace tracefile: Specify a trace file generated by fsim for CORE thread"},
	{"core-skip", 1, 0, HELPOPTIONID+3,  OptionType_INT,   &g_skipCnt[THREAD_ID_CORE], "0",
	NULL, "-core-skip: Specify number of instructions to be ignored for CORE thread simulation"},
	{"bb-skip",   1, 0, HELPOPTIONID+4,  OptionType_INT,   &g_skipCnt[THREAD_ID_BB], "0",
	NULL, "-bb-skip: Specify number of instructions to be ignored for BB thread simulation"},
	{"core-start-addr", 1, 0, HELPOPTIONID+5,  OptionType_X,   &g_startAddr[THREAD_ID_CORE], "0",
	NULL, "-core-start-addr: Specify starting address for CORE thread simulation"},
	{"bb-start-addr",   1, 0, HELPOPTIONID+6,  OptionType_X,   &g_startAddr[THREAD_ID_BB], "0",
	NULL, "-bb-start-addr: Specify starting address for BB thread simulation"},	
	{"include-nop",     1, 0, HELPOPTIONID+7, OptionType_BOOL,  &g_includeNOP, "true",
	NULL, "-include-nop: specify true to include NOP instructions; false to ignore"},
	{"core-end-limit", 1, 0, HELPOPTIONID+8,  OptionType_INT,   &g_endLimit[THREAD_ID_CORE], "0",
	NULL, "-core-end-limit: Specify maximum instructions to be processed in CORE thread"},
	{"bb-end-limit",   1, 0, HELPOPTIONID+9,  OptionType_INT,   &g_endLimit[THREAD_ID_BB], "0",
	NULL, "-bb-end-limit: Specify maximum instructions to be processed in BB thread"},
	{"core-max-read-ports", 1, 0, HELPOPTIONID+10,  OptionType_INT,   &g_maxGprReadPorts[THREAD_ID_CORE], "0",
	NULL, "-core-max-read-ports: Specify maximum read ports in CORE thread"},
	{"bb-max-read-ports",   1, 0, HELPOPTIONID+11,  OptionType_INT,   &g_maxGprReadPorts[THREAD_ID_BB], "0",
	NULL, "-bb-max-read-ports: Specify maximum read ports in BB thread"},
	{"core-max-write-ports", 1, 0, HELPOPTIONID+12,  OptionType_INT,   &g_maxGprWritePorts[THREAD_ID_CORE], "0",
	NULL, "-core-max-write-ports: Specify maximum write ports in CORE thread"},
	{"bb-max-write-ports",   1, 0, HELPOPTIONID+13,  OptionType_INT,   &g_maxGprWritePorts[THREAD_ID_BB], "0",
	NULL, "-bb-max-write-ports: Specify maximum write ports in BB thread"},
	{"core-max-issue", 1, 0, HELPOPTIONID+14,  OptionType_INT,   &g_maxIssue[THREAD_ID_CORE], "0",
	NULL, "-core-max-issue: Specify maximum instructions can be issued in one cycle for CORE thread"},
	{"bb-max-issue",   1, 0, HELPOPTIONID+15,  OptionType_INT,   &g_maxIssue[THREAD_ID_BB], "0",
	NULL, "-bb-max-issue: Specify maximum instructions can be issued in one cycle for BB thread"},
	{"core-max-fetch", 1, 0, HELPOPTIONID+16,  OptionType_INT,   &g_maxFetch[THREAD_ID_CORE], "0",
	NULL, "-core-max-fetch: Specify maximum instructions can be fetched in one cycle for CORE thread"},
	{"bb-max-fetch",   1, 0, HELPOPTIONID+17,  OptionType_INT,   &g_maxFetch[THREAD_ID_BB], "0",
	NULL, "-bb-max-fetch: Specify maximum instructions can be fetched in one cycle for BB thread"},
	{"add-exec-unit",   3, 0, HELPOPTIONID+18,  OptionType_STR,   g_execResources, "",
	NULL, "-add-exec-unit: Add an execution unit in 'name,type[,type]' pair. For example, 'ALU0,ALU'"},
	{"verbose",   1, 0, HELPOPTIONID+19,  OptionType_INT,   &g_verbose, "6",
	NULL, "-verbose: verbose level.0:all, 7:least."},
	{"dump-iwin",   2, 0, HELPOPTIONID+20,  OptionType_BOOL,   &g_dumpIWin, "0",
	NULL, "-dump-iwin: dump all instructions in issue window after each cycle."},
	{"dump-pipe",   2, 0, HELPOPTIONID+21,  OptionType_BOOL,   &g_dumpPipe, "0",
	NULL, "-dump-pipe: dump all instructions in pipeline after each cycle."},
	{"dump-fetchbuf",   2, 0, HELPOPTIONID+22,  OptionType_BOOL,   &g_dumpFetchBuffer, "0",
	NULL, "-dump-fetchbuf: dump all instructions in fetch buffer after each cycle."},
	{"dump-resource-status",   2, 0, HELPOPTIONID+23,  OptionType_BOOL,   &g_dumpResourceStatus, "0",
	NULL, "-dump-resource-status: dump resource status after each cycle."},
	{"dump-hazard-details",   2, 0, HELPOPTIONID+24,  OptionType_BOOL,   &g_dumpHazardDetails, "0",
	NULL, "-dump-hazard-details: dump hazard details for each instructions after each cycle."},
	{"dump-branch-info",   2, 0, HELPOPTIONID+25,  OptionType_BOOL,   &g_dumpBranchInfo, "0",
	NULL, "-dump-branch-info: dump branch instr information summary."},
	{"dump-all",   2, 0, HELPOPTIONID+26,  OptionType_BOOL,   &g_dumpAll, "0",
	NULL, "-dump-all: dump all information after each cycle."},
	{"dump-config",   2, 0, HELPOPTIONID+27,  OptionType_BOOL,   &g_dumpConfig, "0",
	NULL, "-dump-config: dump configuration."},
	{"thread-priority",   1, 0, HELPOPTIONID+28,  OptionType_STR,   g_issuePriority, "",
	NULL, "-thread-priority: issue order by thread names: 'core,bb,...' or 'bb,core,..."},
	{"RAW-basic-latency",   1, 0, HELPOPTIONID+29,  OptionType_INT,   &g_RAWBasicLatency, "1",
	NULL, "-RAW-basic-latency: delay cycles when RAW occurs without memory access.Memory access: +1; Cache miss: TBD"},
	//{"dcache-miss-ratio",   1, 0, HELPOPTIONID+30,  OptionType_INT,   &g_dcacheMissRatio, "0",
	//NULL, "-dcache-miss-ratio: simulate dcache miss on % of LD instructions. The value is a percentile."},
	{"dcache-miss-penalty",   1, 0, HELPOPTIONID+30,  OptionType_INT,   &g_dcacheMissPenalty, "0",
	NULL, "-dcache-miss-penalty: cycles for dcache miss penalty"},
	{"icache-miss-penalty",   1, 0, HELPOPTIONID+31,  OptionType_INT,   &g_icacheMissPenalty, "0",
	NULL, "-icache-miss-penalty: cycles for icache miss penalty"},
	{"branch-penalty",   1, 0, HELPOPTIONID+32,  OptionType_INT,   &g_brPenalty, "2",
	NULL, "-branch-penalty: cycles for branch prediction miss penalty"},
	{"jr-penalty",   1, 0, HELPOPTIONID+33,  OptionType_INT,   &g_jrPenalty, "1",
	NULL, "-jr-penalty: cycles for jr miss penalty"},
	{"link-reg-latency",   1, 0, HELPOPTIONID+34,  OptionType_INT,   &g_linkRegisterLatency, "5",
	NULL, "-link-reg-latency: cycles for link register to be ready for return"},
	{"core-no-ALULS",   2, 0, HELPOPTIONID+35,  OptionType_BOOL,   &g_coreNoALULS, "0",
	NULL, "-core-no-ALULS: no ALU/LS unit for core thread."},
	{"bb-no-ALU",   2, 0, HELPOPTIONID+36,  OptionType_BOOL,   &g_bbNoALU, "0",
	NULL, "-bb-no-ALU: no ALU unit for BB thread."},
	{"core-rsc-mask",   1, 0, HELPOPTIONID+37,  OptionType_INT,   &g_coreRscMask, "-1",
	NULL, "-core-rsc-mask: enable/disable resources can be used by core thread. bit n controls the n-th resource:0-disable, 1-enable."},
	{"bb-rsc-mask",   1, 0, HELPOPTIONID+38,  OptionType_INT,   &g_bbRscMask, "-1",
	NULL, "-bb-rsc-mask: enable/disable resources can be used by BB thread. bit n controls the n-th resource:0-disable, 1-enable."},
		{"mac-latency",   1, 0, HELPOPTIONID+39,  OptionType_INT,   &g_macLatency, "1",
	NULL, "-mac-latency: Extra latency for MAC instructions."},
	{"eu-set",   1, 0, HELPOPTIONID+40,  OptionType_INT,   &g_euSetType, "0",
	NULL, "-eu-set: one of 0, 1, 2 or 3. 0 - no change; 1 - separate LS from ALU; 2 - separate BR from ALU; 3 - separate both LS and BR from ALU"},
	{"cycle-mask",   1, 0, HELPOPTIONID+41,  OptionType_INT,   &g_cycleMask, "-1",
	NULL, "-cycle-mask: If cycle & cycle-mask is true, BB has issuing priority"},
	{"total-max-issue",   1, 0, HELPOPTIONID+42,  OptionType_INT,   &g_totalMaxIssue, "4",
	NULL, "-total-max-issue: Maximum number of instructions can be issued for all threads"},
	{"max-issue-per-call",   1, 0, HELPOPTIONID+43,  OptionType_INT,   &g_maxIssuePerCall, "1",
	NULL, "-max-issue-per-call: Maximum number of instructions can be issued at a time for each thread"},
	{"externalmemLatency",  1, 0, HELPOPTIONID+44, OptionType_INT, &g_externalmemLatency, "2",
	NULL, "-externalmemLatency: cycles for load/store instructions accessing external memory latency"},
	{"externalmemHigh", 1, 0, HELPOPTIONID+45, OptionType_X, &g_externalmemHigh, "0",
	NULL, "-externalmemHigh: the end address of external memory"},
	{"externalmemLow", 1, 0, HELPOPTIONID+46, OptionType_X, &g_externalmemLow, "0" ,
	NULL, "-externalmemLow: the begin address of external memory"},
	{"membankLatency", 1, 0, HELPOPTIONID+47, OptionType_INT, &g_membankLatency, "2" ,
	NULL, "-membankLatency: C3 instruction access same memory bank twice latency"},
#else
	{"trace0", 1, 0, HELPOPTIONID+1,  OptionType_STR,   g_trd0TraceFile, "",
	NULL, "-trace0 tracefile: Specify a trace file generated by fsim for thread0"},
	{"trace1", 1, 0, HELPOPTIONID+2,  OptionType_STR,   g_trd1TraceFile, "",
	NULL, "-trace1 tracefile: Specify a trace file generated by fsim for thread1"},
	{"trace2", 1, 0, HELPOPTIONID+3,  OptionType_STR,   g_trd2TraceFile, "",
	NULL, "-trace2 tracefile: Specify a trace file generated by fsim for thread2"},
	{"trace3", 1, 0, HELPOPTIONID+4,  OptionType_STR,   g_trd3TraceFile, "",
	NULL, "-trace3 tracefile: Specify a trace file generated by fsim for thread3"},
	{"thread0-skip", 1, 0, HELPOPTIONID+5,  OptionType_INT,   &g_skipCnt[THREAD_ID_0], "0",
	NULL, "-thread0-skip: Specify number of instructions to be ignored for thread0 simulation"},
	{"thread1-skip", 1, 0, HELPOPTIONID+6,  OptionType_INT,   &g_skipCnt[THREAD_ID_1], "0",
	NULL, "-thread1-skip: Specify number of instructions to be ignored for thread1 simulation"},
	{"thread2-skip", 1, 0, HELPOPTIONID+7,  OptionType_INT,   &g_skipCnt[THREAD_ID_2], "0",
	NULL, "-thread2-skip: Specify number of instructions to be ignored for thread2 simulation"},
	{"thread3-skip", 1, 0, HELPOPTIONID+8,  OptionType_INT,   &g_skipCnt[THREAD_ID_3], "0",
	NULL, "-thread3-skip: Specify number of instructions to be ignored for thread3 simulation"},
	{"thread0-start-addr", 1, 0, HELPOPTIONID+9,  OptionType_X,   &g_startAddr[THREAD_ID_0], "0",
	NULL, "-thread0-start-addr: Specify starting address for thread0 simulation"},
	{"thread1-start-addr", 1, 0, HELPOPTIONID+10,  OptionType_X,   &g_startAddr[THREAD_ID_1], "0",
	NULL, "-thread1-start-addr: Specify starting address for thread1 simulation"},
	{"thread2-start-addr", 1, 0, HELPOPTIONID+11,  OptionType_X,   &g_startAddr[THREAD_ID_2], "0",
	NULL, "-thread2-start-addr: Specify starting address for thread2 simulation"},
	{"thread3-start-addr", 1, 0, HELPOPTIONID+12,  OptionType_X,   &g_startAddr[THREAD_ID_3], "0",
	NULL, "-thread3-start-addr: Specify starting address for thread3 simulation"},
	{"include-nop",     1, 0, HELPOPTIONID+13, OptionType_BOOL,  &g_includeNOP, "true",
	NULL, "-include-nop: specify true to include NOP instructions; false to ignore"},
	{"thread0-end-limit", 1, 0, HELPOPTIONID+14,  OptionType_INT,   &g_endLimit[THREAD_ID_0], "0",
	NULL, "-thread0-end-limit: Specify maximum instructions to be processed in thread0"},
	{"thread1-end-limit", 1, 0, HELPOPTIONID+15,  OptionType_INT,   &g_endLimit[THREAD_ID_1], "0",
	NULL, "-thread1-end-limit: Specify maximum instructions to be processed in thread1"},
	{"thread2-end-limit", 1, 0, HELPOPTIONID+16,  OptionType_INT,   &g_endLimit[THREAD_ID_2], "0",
	NULL, "-thread2-end-limit: Specify maximum instructions to be processed in thread2"},
	{"thread3-end-limit", 1, 0, HELPOPTIONID+17,  OptionType_INT,   &g_endLimit[THREAD_ID_3], "0",
	NULL, "-thread3-end-limit: Specify maximum instructions to be processed in thread3"},
	{"thread0-max-read-ports", 1, 0, HELPOPTIONID+18,  OptionType_INT,   &g_maxGprReadPorts[THREAD_ID_0], "0",
	NULL, "-thread0-max-read-ports: Specify maximum read ports in thread0"},
    {"thread1-max-read-ports", 1, 0, HELPOPTIONID+19,  OptionType_INT,   &g_maxGprReadPorts[THREAD_ID_1], "0",
	NULL, "-thread1-max-read-ports: Specify maximum read ports in thread1"},
	{"thread2-max-read-ports", 1, 0, HELPOPTIONID+20,  OptionType_INT,   &g_maxGprReadPorts[THREAD_ID_2], "0",
	NULL, "-thread2-max-read-ports: Specify maximum read ports in thread2"},
	{"thread3-max-read-ports", 1, 0, HELPOPTIONID+21,  OptionType_INT,   &g_maxGprReadPorts[THREAD_ID_3], "0",
	NULL, "-thread3-max-read-ports: Specify maximum read ports in thread3"},
	{"thread0-max-write-ports", 1, 0, HELPOPTIONID+22,  OptionType_INT,   &g_maxGprWritePorts[THREAD_ID_0], "0",
	NULL, "-thread0-max-write-ports: Specify maximum write ports in thread0"},
	{"thread1-max-write-ports", 1, 0, HELPOPTIONID+23,  OptionType_INT,   &g_maxGprWritePorts[THREAD_ID_1], "0",
	NULL, "-thread1-max-write-ports: Specify maximum write ports in thread1"},
	{"thread2-max-write-ports", 1, 0, HELPOPTIONID+24,  OptionType_INT,   &g_maxGprWritePorts[THREAD_ID_2], "0",
	NULL, "-thread2-max-write-ports: Specify maximum write ports in thread2"},
	{"thread3-max-write-ports", 1, 0, HELPOPTIONID+25,  OptionType_INT,   &g_maxGprWritePorts[THREAD_ID_3], "0",
	NULL, "-thread3-max-write-ports: Specify maximum write ports in thread3"},
	{"thread0-max-issue", 1, 0, HELPOPTIONID+26,  OptionType_INT,   &g_maxIssue[THREAD_ID_0], "0",
	NULL, "-thread0-max-issue: Specify maximum instructions can be issued in one cycle for thread0"},
    {"thread1-max-issue", 1, 0, HELPOPTIONID+27,  OptionType_INT,   &g_maxIssue[THREAD_ID_1], "0",
	NULL, "-thread1-max-issue: Specify maximum instructions can be issued in one cycle for thread1"},
	{"thread2-max-issue", 1, 0, HELPOPTIONID+28,  OptionType_INT,   &g_maxIssue[THREAD_ID_2], "0",
	NULL, "-thread2-max-issue: Specify maximum instructions can be issued in one cycle for thread2"},
	{"thread3-max-issue", 1, 0, HELPOPTIONID+29,  OptionType_INT,   &g_maxIssue[THREAD_ID_3], "0",
	NULL, "-thread3-max-issue: Specify maximum instructions can be issued in one cycle for thread3"},
	{"thread0-max-fetch", 1, 0, HELPOPTIONID+30,  OptionType_INT,   &g_maxFetch[THREAD_ID_0], "0",
	NULL, "-thread0-max-fetch: Specify maximum instructions can be fetched in one cycle for thread0"},
	{"thread1-max-fetch", 1, 0, HELPOPTIONID+31,  OptionType_INT,   &g_maxFetch[THREAD_ID_1], "0",
	NULL, "-thread1-max-fetch: Specify maximum instructions can be fetched in one cycle for thread1"},
	{"thread2-max-fetch", 1, 0, HELPOPTIONID+32,  OptionType_INT,   &g_maxFetch[THREAD_ID_2], "0",
	NULL, "-thread2-max-fetch: Specify maximum instructions can be fetched in one cycle for thread2"},
	{"thread3-max-fetch", 1, 0, HELPOPTIONID+33,  OptionType_INT,   &g_maxFetch[THREAD_ID_3], "0",
	NULL, "-thread3-max-fetch: Specify maximum instructions can be fetched in one cycle for thread3"},
	{"add-exec-unit",   3, 0, HELPOPTIONID+34,  OptionType_STR,   g_execResources, "",
	NULL, "-add-exec-unit: Add an execution unit in 'name,type[,type]' pair. For example, 'ALU0,ALU'"},
	{"verbose",   1, 0, HELPOPTIONID+35,  OptionType_INT,   &g_verbose, "6",
	NULL, "-verbose: verbose level.0:all, 7:least."},
	{"dump-iwin",   2, 0, HELPOPTIONID+36,  OptionType_BOOL,   &g_dumpIWin, "0",
	NULL, "-dump-iwin: dump all instructions in issue window after each cycle."},
	{"dump-pipe",   2, 0, HELPOPTIONID+37,  OptionType_BOOL,   &g_dumpPipe, "0",
	NULL, "-dump-pipe: dump all instructions in pipeline after each cycle."},
	{"dump-fetchbuf",   2, 0, HELPOPTIONID+38,  OptionType_BOOL,   &g_dumpFetchBuffer, "0",
	NULL, "-dump-fetchbuf: dump all instructions in fetch buffer after each cycle."},
	{"dump-resource-status",   2, 0, HELPOPTIONID+39,  OptionType_BOOL,   &g_dumpResourceStatus, "0",
	NULL, "-dump-resource-status: dump resource status after each cycle."},
	{"dump-hazard-details",   2, 0, HELPOPTIONID+40,  OptionType_BOOL,   &g_dumpHazardDetails, "0",
	NULL, "-dump-hazard-details: dump hazard details for each instructions after each cycle."},
	{"dump-branch-info",   2, 0, HELPOPTIONID+41,  OptionType_BOOL,   &g_dumpBranchInfo, "0",
	NULL, "-dump-branch-info: dump branch instr information summary."},
	{"dump-all",   2, 0, HELPOPTIONID+42,  OptionType_BOOL,   &g_dumpAll, "0",
	NULL, "-dump-all: dump all information after each cycle."},
	{"dump-config",   2, 0, HELPOPTIONID+43,  OptionType_BOOL,   &g_dumpConfig, "0",
	NULL, "-dump-config: dump configuration."},            
	{"thread-priority",   1, 0, HELPOPTIONID+44,  OptionType_STR,   g_issuePriority, "",
	NULL, "-thread-priority: issue order by thread names: 'thread0,thread1,...' or 'thread1,thread2,..."},
	{"RAW-basic-latency",   1, 0, HELPOPTIONID+45,  OptionType_INT,   &g_RAWBasicLatency, "1",
	NULL, "-RAW-basic-latency: delay cycles when RAW occurs without memory access.Memory access: +1; Cache miss: TBD"},
	//{"dcache-miss-ratio",   1, 0, HELPOPTIONID+46,  OptionType_INT,   &g_dcacheMissRatio, "0",
	//NULL, "-dcache-miss-ratio: simulate dcache miss on % of LD instructions. The value is a percentile."},
	{"dcache-miss-penalty",   1, 0, HELPOPTIONID+46,  OptionType_INT,   &g_dcacheMissPenalty, "0",
	NULL, "-dcache-miss-penalty: cycles for dcache miss penalty"},
	{"icache-miss-penalty",   1, 0, HELPOPTIONID+47,  OptionType_INT,   &g_icacheMissPenalty, "0",
	NULL, "-icache-miss-penalty: cycles for icache miss penalty"},
	{"branch-penalty",   1, 0, HELPOPTIONID+48,  OptionType_INT,   &g_brPenalty, "2",
	NULL, "-branch-penalty: cycles for branch prediction miss penalty"},
	{"jr-penalty",   1, 0, HELPOPTIONID+49,  OptionType_INT,   &g_jrPenalty, "1",
	NULL, "-jr-penalty: cycles for jr miss penalty"},
	{"link-reg-latency",   1, 0, HELPOPTIONID+50,  OptionType_INT,   &g_linkRegisterLatency, "5",
	NULL, "-link-reg-latency: cycles for link register to be ready for return"},
	{"thread0-no-ALULS",   2, 0, HELPOPTIONID+51,  OptionType_BOOL,   &g_thread0NoALULS, "0",
	NULL, "-thread0-no-ALULS: no ALU/LS unit for thread0."},
    {"thread1-no-ALULS",   2, 0, HELPOPTIONID+52,  OptionType_BOOL,   &g_thread1NoALULS, "0",
	NULL, "-thread1-no-ALULS: no ALU/LS unit for thread1."},
	{"thread2-no-ALULS",   2, 0, HELPOPTIONID+53,  OptionType_BOOL,   &g_thread2NoALULS, "0",
	NULL, "-thread2-no-ALULS: no ALU/LS unit for thread2."},
	{"thread3-no-ALULS",   2, 0, HELPOPTIONID+54,  OptionType_BOOL,   &g_thread3NoALULS, "0",
	NULL, "-thread3-no-ALULS: no ALU/LS unit for thread3."},	
	{"thread0-rsc-mask",   1, 0, HELPOPTIONID+55,  OptionType_INT,   &g_thread0RscMask, "-1",
	NULL, "-thread0-rsc-mask: enable/disable resources can be used by thread0. bit n controls the n-th resource:0-disable, 1-enable."},
    {"thread1-rsc-mask",   1, 0, HELPOPTIONID+56,  OptionType_INT,   &g_thread1RscMask, "-1",
	NULL, "-thread1-rsc-mask: enable/disable resources can be used by thread1. bit n controls the n-th resource:0-disable, 1-enable."},
    {"thread2-rsc-mask",   1, 0, HELPOPTIONID+57,  OptionType_INT,   &g_thread2RscMask, "-1",
	NULL, "-thread2-rsc-mask: enable/disable resources can be used by thread2. bit n controls the n-th resource:0-disable, 1-enable."},
    {"thread3-rsc-mask",   1, 0, HELPOPTIONID+58,  OptionType_INT,   &g_thread3RscMask, "-1",
	NULL, "-thread3-rsc-mask: enable/disable resources can be used by thread3. bit n controls the n-th resource:0-disable, 1-enable."},
	{"mac-latency",   1, 0, HELPOPTIONID+59,  OptionType_INT,   &g_macLatency, "1",
	NULL, "-mac-latency: Extra latency for MAC instructions."},
	{"eu-set",   1, 0, HELPOPTIONID+60,  OptionType_INT,   &g_euSetType, "0",
	NULL, "-eu-set: one of 0, 1, 2 or 3. 0 - no change; 1 - separate LS from ALU; 2 - separate BR from ALU; 3 - separate both LS and BR from ALU"},
	{"cycle-mask",   1, 0, HELPOPTIONID+61,  OptionType_INT,   &g_cycleMask, "-1",
	NULL, "-cycle-mask: If cycle & cycle-mask is true, BB has issuing priority"},
	{"total-max-issue",   1, 0, HELPOPTIONID+62,  OptionType_INT,   &g_totalMaxIssue, "4",
	NULL, "-total-max-issue: Maximum number of instructions can be issued for all threads"},
	{"max-issue-per-call",   1, 0, HELPOPTIONID+63,  OptionType_INT,   &g_maxIssuePerCall, "1",
	NULL, "-max-issue-per-call: Maximum number of instructions can be issued at a time for each thread"},
	{"externalmemPenalty",  1, 0, HELPOPTIONID+64, OptionType_INT, &g_externalmemPenalty, "2",
	NULL, "-externalmemPenalty: cycles for load/store instructions accessing external memory penalty"},
	{"externalmemHigh", 1, 0, HELPOPTIONID+65, OptionType_X, &g_externalmemHigh, "0",
	NULL, "-externalmemHigh: the end address of external memory"},
	{"externalmemLow", 1, 0, HELPOPTIONID+66, OptionType_X, &g_externalmemLow, "0" ,
	NULL, "-externalmemlow: the begin address of external memory"},
	{"membankPenalty", 1, 0, HELPOPTIONID+67, OptionType_INT, &g_membankPenalty, "2" ,
	NULL, "-membankPenalty: C3 instruction access the same memory bank twice penalty"},
#endif
	{NULL},

};

int Psim_DumpOptions(void/*struct option *optTable*/)
{
	DumpOptionsValue(psim_optTable);
	return 0;
}

void Psim_Usage(char *cmd)
{
	printf("Simplight (R) Performance Simulator Version 0.1\n");

	DumpOptionDescriptions(psim_optTable);
	exit(-1);
}

int Psim_EnableDumpAll(void)
{
	g_dumpIWin=true;
	g_dumpPipe=true;
	g_dumpFetchBuffer=true;
	g_dumpResourceStatus=true;
	g_dumpHazardDetails = true;
	g_dumpConfig = true;
	g_dumpBranchInfo = true;
	set_verbose_level(0);
	return 0;
}

void Psim_Version()
{
	return;
}

int Psim_ParseArguments(int argc, char *argv[])
{
	int i, j;
	for (i=0; i<sizeof(psim_optTable)/sizeof(struct option); i++) {
		for (j=i+1;j<sizeof(psim_optTable)/sizeof(struct option); j++) {
			if (psim_optTable[i].val == psim_optTable[j].val) {
				fprintf(stderr, "ERROR: duplicate option id found for option %s and %s\n",
					psim_optTable[i].name, psim_optTable[j].name);
				exit(-1);
			}
		}
	}
	
	InitArgs (Psim_Usage, Psim_Version, psim_optTable);

	ParseInternalArguments(argc, argv, NULL);
	// more checking follow here
#ifndef MULTI_THREAD
	if (!PSIM_SL1::g_appTraceFile[0] && !g_bbTraceFile[0])
#else	
	if (!PSIM_SL1::g_trd0TraceFile[0] && !g_trd1TraceFile[0] && g_trd2TraceFile[0] && g_trd3TraceFile[0])
#endif
	{
		fprintf(stderr, "ERROR: At least one tracefile must be specified. Use '--apptrace' or '--bbtrace'.\n");
		exit(-1);
	}
	set_verbose_level(g_verbose);
	if (g_dumpAll) {
		Psim_EnableDumpAll();
	}
	return 0;
}

/* ////////////////////// End of file "PerfGlobalOpt.cpp" ////////////////////// */

